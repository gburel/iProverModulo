let autotheo = "autotheo"
let iproveropt = "iprover_moduloopt"

let dedukti_name f = Id_encoding.encode_id (Filename.chop_extension f)



let cat filename =
  let chan = open_in filename in
  let size = 4 * 1024 in
  let buffer = Bytes.create size in
  let eof = ref false in
  while not !eof do
    let len = input chan buffer 0 size in
    if len > 0
    then print_string (Bytes.sub buffer 0 len)
    else eof := true
  done;
  close_in chan


let _ =
  if Array.length Sys.argv < 3 then
    begin
      print_endline ("Usage: " ^ Sys.argv.(0) ^ " file_name time_limit [other args]");
      exit 1
    end;
  Sys.set_signal 24 (Sys.Signal_handle (fun _ -> print_endline "% SZS status Timeout"; exit 2));
  let file_name = Sys.argv.(1) in
  let include_path =
    ref (Filename.dirname file_name) in
  let strategies = if Array.length Sys.argv >= 5 && Sys.argv.(3) = "--strategies"
		   then Sys.argv.(4)
		   else
		     "Equiv(ClausalAll);ClausalAll" in
  let strat_list = Str.(split (regexp ";") strategies) in
  let time_limit = int_of_string Sys.argv.(2) in
  let temp_input = Filename.temp_file "iprover_modulo_" ".p" in
  let autotheo_proof = Filename.temp_file "autotheo_proof_" ".s" in
  let dedukti_proof = Filename.temp_file "dedukti_proof_" ".dk" in
  let last_szs = Filename.temp_file "iprover_modulo_szs" "" in
  let process_strategy time_limit s =
    let command = Printf.sprintf
		    "%s -H '%s' --include_path %s -P %s %s > %s"
		    autotheo
		    s
		    !include_path
		    autotheo_proof
		    file_name
		    temp_input
    in
    let autotheo_res =
      Sys.command command in
    let autotheo_res =
      if autotheo_res = 2 then
	try
	  include_path := Sys.getenv "TPTP";
	  let command = Printf.sprintf
			  "%s -H '%s' --include_path %s -P %s %s > %s"
			  autotheo
			  s
			  !include_path
			  autotheo_proof
			  file_name
			  temp_input
	  in
	  print_endline ("Searching the included file in the " ^ !include_path ^ " directory.");
	  Sys.command command
	with Not_found ->
	  print_endline "TPTP environment variable not set.";
	  autotheo_res
      else autotheo_res
    in
    if autotheo_res <> 0  then
      begin
	print_endline ("autotheo exited with code " ^ string_of_int autotheo_res);
	print_endline "% SZS status GaveUp";
	Sys.remove temp_input;
	Sys.remove autotheo_proof;
	Sys.remove dedukti_proof;
	exit 2
      end;
    let f = open_in temp_input in
    let has_conj_fof = try
	let s = input_line f in
	print_endline s;
	s = "% FOF problem with conjecture"
      with End_of_file -> false in
    close_in f;
    let initial_command = iproveropt ^ " --modulo true --schedule false --prep_prop_sim false --res_to_prop_solver none --res_prop_simpl_given false --res_lit_sel kbo_max --large_theory_mode false --res_time_limit 1000 --res_orphan_elimination false --normalization_type plugin --dedukti_out_proof true --dedukti_tempfile " ^ dedukti_proof ^ " --force_thm_status " ^ (if has_conj_fof then "true " else "false ") ^ "--comb_res_mult 1000 --comb_inst_mult 300 --eprover_path " ^ "@runningpath@ " in
    let command_buffer = Buffer.create 400 in
    Buffer.add_string command_buffer initial_command;
    Buffer.add_string command_buffer ("--time_out_real " ^ string_of_int (time_limit));
    let i_init = if Array.length Sys.argv >= 5 && Sys.argv.(3) = "--strategies" then 5 else 3 in
    for i = i_init to Array.length Sys.argv - 1 do
      Buffer.add_char command_buffer ' ';
      Buffer.add_string command_buffer Sys.argv.(i)
    done;
    Buffer.add_string command_buffer (" " ^ temp_input);
    let temp_output = Filename.temp_file "iprover_modulo_out_" "" in
    Buffer.add_string command_buffer (" | tee " ^ temp_output ^ " | grep -v \"SZS\"");
    print_endline ("Executing " ^ Buffer.contents command_buffer);
    Sys.command (Buffer.contents command_buffer);
    if Sys.command ("grep 'SZS status Theorem' " ^ temp_output) = 0 ||
	 Sys.command ("grep 'SZS status Unsatisfiable' " ^ temp_output) = 0
    then begin
	print_endline "% SZS output start CNFRefutation";
	print_endline "% Axioms transformation by autotheo";
	cat autotheo_proof;
	print_endline "\n%-------------------------------------------------------------";
	print_endline "% Dedukti proof by iprover";
	cat dedukti_proof;
	print_endline "% SZS output end CNFRefutation";
	Sys.remove temp_output;
	Sys.remove autotheo_proof;
	Sys.remove dedukti_proof;
	Sys.remove temp_input;
	Sys.remove last_szs;
	exit 0
      end
    else
      begin
	Sys.command ("grep 'SZS' " ^ temp_output ^ " > " ^ last_szs);
	Sys.remove temp_output
      end
  in
  List.iter (process_strategy (time_limit / List.length strat_list)) strat_list;
  Sys.remove temp_input;
  Sys.remove autotheo_proof;
  Sys.remove dedukti_proof;
  print_endline "Last SZS status :";
  cat last_szs;
  Sys.remove last_szs;
  exit 1
