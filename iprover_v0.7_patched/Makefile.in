# make PROFILE=true for profile 
# make CPP=true for c++ version of minisat

prefix= @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
OCAML=ocaml
OCAMLC=ocamlc
OCAMLOPT=@OCAMLOPT_LOCAL@
#OCAMLLIB=/usr/local/lib/ocaml
#OCAMLLIB=/usr/lib/ocaml/3.10.2
#OCAMLLIB is set in Make.extras
EPROVER_PATH="E_Prover" 
OPT=true
OBJPATH=obj/
ADDTONAME=
PROFILE=
OCAMLDEP=ocamldep
#CAMLP5O= @CAMLP5O@
OCAMLLIBS_BASE_NAMES=unix str dynlink
INCLUDES=
#OCAMLFLAGS=$(INCLUDES)
#OCAMLOPTFLAGS=$(INCLUDES)
CPP=
#OCAMLFLAGS=-I obj/
#LIB  = lib
LEXER = lexer_tptp
PARSER = parser_tptp
BEFORE_PARSING = lib parser_types 
#PARSER_TYPES = parser_types
PARSING= src/$(LEXER).ml src/$(PARSER).ml
MKDIR_P=@MKDIR_P@
INSTALL=@INSTALL@
INSTALL_DATA=@INSTALL_DATA@

OCAMLLIB=@OCAMLLIB@

#CC        = gcc
#KK replace avbove by this for cpp version of minisat
#CC        = g++

BASE_NAMES = config two_way_stacks options statistics bit_vec tableArray heap priority_queues tree trie trie_func vectorIndex abstDB abstAssignDB symbol symbolDB var term plugin termDB orderings subst substBound dismatching clause selection clauseAssignDB clauseDB  parsed_input_to_db context parseFiles rewrite pp_control pp dkterm dk_output splitting unif unifIndex discrTree subsetSubsume subsumptionIndex eq_axioms propSolver prop_solver_exchange inference_rules finite_models preprocess large_theories 

OBJ_BASE_NAMES = $(BEFORE_PARSING) $(LEXER) $(PARSER) $(BASE_NAMES)

#EXEC_BASE_NAME = unif_test


#EXEC_BASE_NAME = iprover

#resolution prover
RPROVER_BASE_NAME = rprover
RPROVER_ADD_OBJ_BASE_NAMES = discount
IPROVER_BASE_NAME = iprover

#PROP_SOLVER_NAMES= solver solver_interface 
#KK replace avbove by this for cpp version of minisat
#PROP_SOLVER_NAMES=Solver minisat_c_wrapper minisat_ocaml_wrapper

IPROVER_ADD_OBJ_BASE_NAMES = discount instantiation 


ifeq ($(OPT),true)
  OCAMLFLAGS= -inline 10 -I obj/ 
  COMPILE=$(OCAMLOPT)
  ADDTONAME=opt
  OBJ = $(OBJ_BASE_NAMES:%=obj/%.cmx) 
  RPROVER_ADD_OBJ = $(RPROVER_ADD_OBJ_BASE_NAMES:%=obj/%.cmx)
  IPROVER_ADD_OBJ = $(IPROVER_ADD_OBJ_BASE_NAMES:%=obj/%.cmx) obj/$(IPROVER_BASE_NAME).cmx 
  OCAMLLIBS = $(OCAMLLIBS_BASE_NAMES:%=%.cmxa)
 # IPROVERFLAGS= -cc g++ -ccopt -I$(OCAMLLIB)
#KK  add  this for cpp version of minisat
#IPROVERFLAGS= -cc g++ -ccopt -L$(OCAMLLIB) -I $(OCAMLLIB)
#  CFLAGS = -I$(OCAMLLIB) -O3 -fomit-frame-pointer  
else 	
  OCAMLFLAGS= -I obj/ -g -annot
  IPROVERFLAGS= -custom
  COMPILE=$(OCAMLC)
  OBJ = $(OBJ_BASE_NAMES:%=obj/%.cmo) 
  RPROVER_ADD_OBJ = $(RPROVER_ADD_OBJ_BASE_NAMES:%=obj/%.cmo)
  IPROVER_ADD_OBJ = $(IPROVER_ADD_OBJ_BASE_NAMES:%=obj/%.cmo) obj/$(IPROVER_BASE_NAME).cmo 
  CFLAGS    = -I$(OCAMLLIB) -std=c99
  OCAMLLIBS = $(OCAMLLIBS_BASE_NAMES:%=%.cma)
endif


ifeq ($(CPP),true)	
  CC = g++
  PROP_SOLVER_NAMES=Solver minisat_c_wrapper minisat_ocaml_wrapper
  IPROVERFLAGS= -cc g++ -ccopt -L$(OCAMLLIB) -I $(OCAMLLIB)
  CFLAGS = -I$(OCAMLLIB)	
else
  CC=gcc
  PROP_SOLVER_NAMES= solver solver_interface 
  CFLAGS = -I$(OCAMLLIB)
endif

ifeq ($(PROFILE),true)
  OCAMLFLAGS= -p -I obj/
  CFLAGS = -I$(OCAMLLIB) -p 
  ADDTONAME=prof
endif


IPROVER_C_OBJ= $(PROP_SOLVER_NAMES:%=obj/%.o)

#INTERFACE = $(LIB).cmi $(PARSER_TYPES).cmi $(PARSER).cmi $(BASE_NAMES:%=%.cmi) 

INTERFACE = $(BEFORE_PARSING:%=obj/%.cmi) obj/$(PARSER).cmi $(BASE_NAMES:%=obj/%.cmi) 
RPROVER_INTERFACE_ADD = $(RPROVER_ADD_OBJ_BASE_NAMES:%=obj/%.cmi)
IPROVER_INTERFACE_ADD = $(IPROVER_ADD_OBJ_BASE_NAMES:%=obj/%.cmi)

#OUTNAME= $(EXEC_BASE_NAME)$(ADDTONAME)
RPROVER_NAME = $(RPROVER_BASE_NAME)$(ADDTONAME)
IPROVER_NAME = $(IPROVER_BASE_NAME)_modulo$(ADDTONAME)



#$(OUTNAME) : $(PARSING) $(INTERFACE) $(OBJ) $(EXEC_BASE_NAME).ml
#	$(COMPILE) $(FLAGS) -o $(OUTNAME) $(OBJ) $(EXEC_BASE_NAME).ml

#$(IPROVER_NAME) : $(PARSING) $(INTERFACE) $(IPROVER_INTERFACE_ADD)\
#                  $(OBJ) $(IPROVER_C_OBJ) $(IPROVER_ADD_OBJ) src/$(IPROVER_BASE_NAME).ml
#	$(COMPILE) $(IPROVERFLAGS)  -o $@\
#        $(OCAMLFLAGS) dynlink.cmxa unix.cmxa str.cmxa $(OBJ) $(IPROVER_ADD_OBJ)  $(IPROVER_C_OBJ) src/$(IPROVER_BASE_NAME).ml 






$(IPROVER_NAME) : $(PARSING) $(INTERFACE) $(IPROVER_INTERFACE_ADD)\
                  $(OBJ) $(IPROVER_C_OBJ) $(IPROVER_ADD_OBJ) src/$(IPROVER_BASE_NAME).ml
	$(COMPILE) $(IPROVERFLAGS) $(IPROVER_C_OBJ) -o $@ \
        $(OCAMLFLAGS) $(OCAMLLIBS) $(OBJ) $(IPROVER_ADD_OBJ) 

#solver_interface.o : $(PROP_SOLVER_NAMES:%=%.c)
#	$(CC) $(CFLAGS) -c -I$(OCAMLLIB) solver_interface.c -o $@

$(RPROVER_NAME) : $(PARSING) $(INTERFACE) $(RPROVER_INTERFACE_ADD)\
                  $(OBJ) $(RPROVER_ADD_OBJ) src/$(RPROVER_BASE_NAME).ml
	$(COMPILE) $(OCAMLFLAGS) -o $@\
        $(OCAMLLIBS) $(OBJ) $(RPROVER_ADD_OBJ) src/$(RPROVER_BASE_NAME).ml




src/$(LEXER).ml : src/$(LEXER).mll
	ocamllex src/$(LEXER).mll

src/$(PARSER).ml : src/$(PARSER).mly
	ocamlyacc src/$(PARSER).mly

#inter: $(PARSING) $(INTERFACE) $(OBJ) 
#	$(OCAML) $(OBJ)


#implicit rules
obj/%.o : src/%.c
	$(CC) $(CFLAGS) -c -o $@ $<

obj/%.o : src/%.C
	$(CC) $(CFLAGS) -c -o $@ $<

obj/%.o : src/%.cpp
	$(CC) $(CFLAGS) -c -o $@ $<

#obj/%.cmi : src/%.mli
#	$(OCAMLOPT) $(OCAMLFLAGS) -o $@ -c $< 
#obj/%.cmx : src/%.ml
#	$(OCAMLOPT) $(OCAMLFLAGS) -o $@ -c $<

obj/%.cmi : src/%.mli
	$(OCAMLOPT) $(OCAMLFLAGS) -o $@ -c $< 
obj/%.cmx : src/%.ml
	$(OCAMLOPT) $(OCAMLFLAGS) -o $@ -c $<
obj/%.cmo : src/%.ml
	$(OCAMLC) $(OCAMLFLAGS) -o $@ -c $<


#%.cmi : %.mli
#	$(OCAMLC) $(OCAMLFLAGS) -c $< 
#%.cmo : %.ml
#	$(OCAMLC) $(OCAMLFLAGS) -c $<

#.SUFFIXES: .cmo .cmi .cmx .ml .mli

#obj/%.cmi : src/%.mli 
#	$(OCAMLOPT) $(OCAMLFLAGS) -o $@ -c $< 
#obj/%.cmx : src/%.ml 
#	$(OCAMLOPT) $(OCAMLFLAGS) -o $@ -c $<



.PHONY: clean depend archive
clean:
	rm $(IPROVER_NAME) src/$(LEXER).ml src/$(PARSER).ml obj/*.cmo obj/*.cmx obj/*.cmi obj/*.o


#archive:
#	add=$$(date +%-d%-b%-kh_%Y); name="Archive/iprover_$${add}.tar.gz"; tar -cvzf $$name src/* LICENSE LICENSE_E LICENSE_MiniSat README  Makefile 

archive:
	add=$$(date +%-d%-b%-kh_%Y); new_dir="iprover_$${add}"; name_tar="$${new_dir}.tar.gz"; cd "Archive"; mkdir $${new_dir}; mkdir "$${new_dir}/obj"; cp -r ../src ../LICENSE ../LICENSE_E ../LICENSE_MiniSat ../README  ../Makefile ../configure "$${new_dir}"; pwd; tar -czvf "$${name_tar}" "$${new_dir}"; rm -rf $${new_dir}


#make depend to renew dependences
.PHONY: dep
dep:
	$(OCAMLDEP) -I obj/  $(BASE_NAMES:%=src/%.ml) $(BASE_NAMES:%=src/%.mli) $(IPROVER_ADD_OBJ_BASE_NAMES:%=src/%.ml) $(IPROVER_ADD_OBJ_BASE_NAMES:%=src/%.mli) $(IPROVER_BASE_NAME:%=src/%.ml)  > depend

PLUGIN_OBJS = symbol term lib parsed_input_to_db symbolDB plugin

install:
	$(INSTALL) $(IPROVER_NAME) $(bindir)
	$(MKDIR_P) $(prefix)/share/iprover_modulo
	$(INSTALL_DATA) plugin_iprover.ml.model basic_resolution_options FOL.dk $(prefix)/share/iprover_modulo
	$(INSTALL_DATA) $(PLUGIN_OBJS:%=obj/%.cmi) $(prefix)/share/iprover_modulo



include depend
